import '../scss/style.scss';
import { Controller } from './controllers/controller';

export const game: Controller = Controller.getInstance();
game.startGame();

// MVC モデルについて（Model-View-Controller Model）

// ・MVC モデルとは？

// 一般的な設計パターンの一つです。
// 大雑把に言うと、モデル、ビュー、コントローラーの3つに担当を分けて実装する設計のパターンの理解です。

// ・それぞれの役割は？
// モデル（Model）
// モデルは、データやビジネスロジックを担当するコンポーネント。
// アプリケーションのデータ構造やデータベースとのやり取り、データの操作や処理を担当します。
// モデルは、データの永続性や整合性を管理し、ビジネスルールやデータ操作に関するロジックを実装します。また、他のコンポーネントとの間でデータの受け渡しや通知を行います。

// ビュー（View）
// ビューは、ユーザーインターフェース（UI）を表示するコンポーネント。
// ユーザーに情報を表示し、ユーザーからの入力を受け付ける。ビューは、モデルから受け取ったデータを表示し、ユーザーに対して情報を提供します。
// ユーザーの操作やイベントをコントローラに伝え、反応するために必要な要素を提供します。

// コントローラ（Controller）
// コントローラは、ユーザーの入力を受け取り、モデルとビューの間のやり取りを制御するコンポーネント。
// ユーザーからの入力（クリック、キーボード入力など）を監視し、それに基づいてモデルの更新やビューの更新を行います。
// また、ビューからの操作やイベントに応じて、適切なアクションを実行し、モデルやビューの状態を更新します。コントローラは、モデルとビューの間のインターフェースとして機能し、データのフローとアプリケーションの振る舞いを制御します。

// メリット（抜粋）
// ・ 分離された役割: 各コンポーネントが明確な役割を持ち、コードの可読性と保守性が向上します。
// ・ 再利用性と保守性: コンポーネントの疎結合性により再利用や保守が容易になります。
// ・ テスト容易性: 各コンポーネントを独立してテストできるため、品質管理やバグの早期発見が可能です。

// デメリット（抜粋）
// ・ 複雑性: 初めての開発者にとっては概念的な理解とコーディングのスキルが必要であり、大規模なプロジェクトでは管理が困難になる場合もあります。
// ・ 学習コスト: 新しい概念やパターンを学ぶ必要があり、学習コストがかかることもあります。

//個人的な考え
// MVCモデルについて調べたり、実際にそれに則って実装してみるたものの、正直「この実装はmodel？それともController？どっちだ？」
// といったように悩むことが多々あるかと思いました。
// ある程度大まかには、決まりはあるとは思いますが、人によって、実装方法によっても変わる部分もあるのかなと。
// とはいえ、上記3つに分けて実装をしていくと言う点で大雑把かもしれないですが、分かりやすくもあるのかなとと感じたので、
// 何かを実装する際に少しでもMVCを意識しながら実装すれば、複雑なものは別かもですが、分かりやすくコードを書くことができるのかなとも感じました。

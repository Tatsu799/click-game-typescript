/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./scss/style.scss":
/*!*************************!*\
  !*** ./scss/style.scss ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n\n\n//# sourceURL=webpack://ts_base/./scss/style.scss?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _scss_style_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scss/style.scss */ \"./scss/style.scss\");\n\nconst config = {\n    initialPage: document.getElementById('initialPage'),\n    mainPage: document.getElementById('mainPage'),\n};\nfunction displayNone(ele) {\n    ele.classList.remove('displayBlock');\n    ele.classList.add('displayNone');\n}\nfunction displayBlock(ele) {\n    ele.classList.remove('displayNone');\n    ele.classList.add('displayBlock');\n}\nclass Item {\n    constructor(name, type, maxQuantity, price, imgUrl, unitPrice, perClick, perSec, itemPurchaseCount) {\n        this.totalPrice = 0;\n        this.name = name;\n        this.type = type;\n        this.maxQuantity = maxQuantity;\n        this.price = price;\n        this.imgUrl = imgUrl;\n        this.unitPrice = unitPrice;\n        this.perClick = perClick;\n        this.perSec = perSec;\n        this.itemPurchaseCount = itemPurchaseCount;\n        this.totalPrice = 0;\n    }\n}\nclass UserData {\n    constructor(name, age, days, money, burgers, items) {\n        this.perClickPrice = 25;\n        this.perSecPrice = 0;\n        this.totalItemPrice = 0;\n        this.name = name;\n        this.age = age;\n        this.days = days;\n        this.money = money;\n        this.burgers = burgers;\n        this.items = items;\n        this.perClickPrice = 25;\n        this.perSecPrice = 0;\n        this.totalItemPrice = 0;\n    }\n}\nclass Views {\n    static startGamePage() {\n        const container = document.createElement('div');\n        container.classList.add('initial-container');\n        container.innerHTML = `\n    <h2 class=\"initial-title\">Clicker Empire Game</h2>\n    <input id=\"yourName\" class=\"your-name\" name=\"yourName\" type=\"text\" placeholder=\"Your name\"/>\n    <div class=\"buttons\">\n      <button class=\"new-button\" id=\"new-button\">New</button>\n      <button class=\"login-button\" id=\"login-button\">Login</button>\n    </div>\n    `;\n        if (config.initialPage !== null) {\n            config.initialPage.append(container);\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n    }\n    static mainPage(userData) {\n        const container = document.createElement('div');\n        container.classList.add('mainPage-container');\n        container.innerHTML = `\n      <div id=\"burgers-info\" class=\"box-left\">\n      </div>\n\n      <div class=\"box-right\">\n        <div id=\"userInfo\" class=\"user-info-box\">\n        </div>\n        \n        <div id=\"purchaseItems\" class=\"box-container\">\n        </div>  \n\n        <div id=\"resetSaveButton\">\n        </div>  \n      </div>\n    `;\n        if (config.mainPage !== null) {\n            config.mainPage.append(container);\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        const elementList = [\n            { element: container.querySelector('#burgers-info'), action: Views.burgersInfo },\n            { element: container.querySelector('#burgers-info'), action: Views.burgerImage },\n            { element: container.querySelector('#userInfo'), action: Views.userInfo },\n            { element: container.querySelector('#purchaseItems'), action: Views.boxPurchasePage },\n            { element: container.querySelector('#resetSaveButton'), action: Views.resetSaveButton },\n        ];\n        elementList.forEach(({ element, action }) => {\n            if (!element) {\n                throw new Error('要素が取得できません。');\n            }\n            else {\n                element.append(action(userData));\n            }\n        });\n    }\n    static burgersInfo(userData) {\n        const boxBurger = document.createElement('div');\n        boxBurger.classList.add('count-burgers');\n        boxBurger.innerHTML = `\n      <p id=\"burgers\" class=\"burgers\">${userData.burgers} Burgers</p>\n      <p class=\"burger-price\">One click $${userData.perClickPrice}</p>\n    `;\n        return boxBurger;\n    }\n    static burgerImage(userData) {\n        const container = document.createElement('div');\n        container.classList.add('image-box');\n        container.innerHTML = `\n    <p>Click me!!!!</p>\n    <div id=\"burger-count\" class=\"image-wrapper\">\n      <img id=\"burgers-image\" class=\"click-burger\" src=\"./image/burger-img.png\" alt=\"\" />\n    </div>  \n  `;\n        const clickBurger = container.querySelector('#burgers-image');\n        if (clickBurger) {\n            clickBurger.addEventListener('click', () => {\n                Controller.CountClickBurger(userData);\n            });\n        }\n        return container;\n    }\n    static userInfo(userData) {\n        const boxRight = document.createElement('div');\n        boxRight.classList.add('user-info');\n        boxRight.innerHTML = `\n      <p class=\"name\">${userData.name}</p>\n      <p id=\"age\" class=\"age\">${userData.age} years old</p>\n      <p id=\"days\" class=\"days\">${userData.days.toString()} days</p>\n      <p id=\"money\" class=\"money\">$${userData.money}</p>\n    `;\n        return boxRight;\n    }\n    static boxPurchasePage(userData) {\n        const container = document.createElement('div');\n        container.classList.add('box-purchase');\n        container.setAttribute('id', 'box-purchase');\n        for (let i = 0; i < userData.items.length; i++) {\n            container.innerHTML += `\n      <div id=\"purchase-item\" class=\"purchase-item\" index=\"${i}\">\n        <div class=\"purchase-img\">\n          <img src=\"${userData.items[i].imgUrl}\" alt=\"\" />\n        </div>\n        <div class=\"purchase-info\">\n          <div class=\"items-info\">\n            <p class=\"item-name\">${userData.items[i].name}</p>\n            <p class=\"item-price\">$${userData.items[i].price}</p>\n          </div>\n          <div class=\"item-count\">\n            <p class=\"Possession\">${userData.items[i].itemPurchaseCount}</p>\n            <p class=\"get-money\">${userData.items[i].unitPrice}</p>\n          </div>\n        </div>\n      </div>\n    `;\n        }\n        const purchaseItems = container.querySelectorAll('#purchase-item');\n        let itemsBox;\n        if (config.mainPage) {\n            itemsBox = config.mainPage.querySelector('#purchaseItems');\n            if (!itemsBox) {\n                throw new Error('要素が取得できません。');\n            }\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        for (let i = 0; i < purchaseItems.length; i++) {\n            purchaseItems[i].addEventListener('click', function () {\n                itemsBox.innerHTML = '';\n                itemsBox.append(Views.itemInfoPage(userData, i));\n            });\n        }\n        return container;\n    }\n    static itemInfoPage(userData, index) {\n        const container = document.createElement('div');\n        container.classList.add('box-purchase-info');\n        container.setAttribute('id', 'box-purchase-info');\n        container.setAttribute('index', index.toString());\n        container.innerHTML = `\n      <div class=\"box-purchase-info-wrapper\">\n        <div class=\"purchase-img\">\n          <img src=\"${userData.items[index].imgUrl}\" alt=\"\" />\n        </div>\n        <div class=\"purchase-info\">\n          <div class=\"items-info\">\n            <p class=\"item-name\">${userData.items[index].name}</p>\n            <p class=\"max-purchases\">Max purchases: ${userData.items[index].maxQuantity}</p>\n            <p class=\"item-price\">$ ${userData.items[index].price}</p>\n            <p class=\"get-per-money\">Get ${userData.items[index].unitPrice}</p>\n          </div>\n        </div>\n      </div>\n      <div class=\"select-quantity\" id=\"select-quantity\">\n        <p class=\"text\">How many would you like to buy?</p>\n        <input id=\"inputNum\" class=\"input-quantity\" type=\"number\" placeholder=\"1\"/>\n        <p id=\"totalPrice\" class=\"total-price\">total: $${userData.totalItemPrice}</p>\n      </div>\n      <div class=\"back-next-buttons\">\n        <button id=\"go-back\" class=\"go-back\">Go Back</button>\n        <button id=\"purchase\" class=\"purchase\">Purchase</button>\n      </div>\n    `;\n        let purchaseItems;\n        if (config.mainPage) {\n            purchaseItems = config.mainPage.querySelector('#purchaseItems');\n            if (!purchaseItems) {\n                throw new Error('要素が取得できません。');\n            }\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        const goBackButton = container.querySelector('#go-back');\n        const inputNum = container.querySelector('#inputNum');\n        if (inputNum !== null) {\n            inputNum.addEventListener('change', function () {\n                Controller.totalItemPrice(userData, index, inputNum);\n            });\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        if (goBackButton !== null) {\n            goBackButton.addEventListener('click', function () {\n                purchaseItems.innerHTML = '';\n                purchaseItems.append(Views.boxPurchasePage(userData));\n            });\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        const purchaseButton = container.querySelector('#purchase');\n        if (purchaseButton) {\n            purchaseButton.addEventListener('click', function () {\n                if (+inputNum.value < 1) {\n                    alert('put number');\n                }\n                else {\n                    Controller.purchaseItem(userData, +inputNum.value);\n                    purchaseItems.innerHTML = '';\n                    userData.totalItemPrice = 0;\n                    purchaseItems.append(Views.boxPurchasePage(userData));\n                }\n            });\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        return container;\n    }\n    static resetSaveButton(userData) {\n        const resetSaveButton = document.createElement('div');\n        resetSaveButton.classList.add('reset-save-button');\n        resetSaveButton.innerHTML = `\n      <div id=\"reset\" class=\"reset-button\">\n        <img src=\"./image/reset-icon.png\" alt=\"\" />\n      </div>\n      <div id=\"save\" class=\"save-button\">\n        <img src=\"./image/save-icon.png\" alt=\"\" />\n      </div>\n    `;\n        const saveButton = resetSaveButton.querySelector('#save');\n        const resetButton = resetSaveButton.querySelector('#reset');\n        if (saveButton !== null) {\n            saveButton.addEventListener('click', function () {\n                let jsonEncoded = JSON.stringify(userData);\n                localStorage.setItem(userData.name, jsonEncoded);\n                alert('Save your data!! \\n Please put your name when your login again.');\n                if (config.mainPage && config.initialPage) {\n                    config.mainPage.innerHTML = '';\n                    config.initialPage.innerHTML = '';\n                    displayBlock(config.initialPage);\n                    Controller.stopTimer();\n                    Controller.startGame();\n                }\n                else {\n                    throw new Error('要素が取得できません。');\n                }\n            });\n        }\n        if (resetButton !== null) {\n            resetButton.addEventListener('click', function () {\n                Controller.resetUserData();\n            });\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        return resetSaveButton;\n    }\n    static updateBurgersPage(userData) {\n        let burgersInfo = null;\n        if (config.mainPage) {\n            burgersInfo = config.mainPage.querySelector('#burgers-info');\n            if (!burgersInfo) {\n                throw new Error('要素が取得できません。');\n            }\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        burgersInfo.innerHTML = '';\n        burgersInfo.append(Views.burgersInfo(userData));\n        burgersInfo.append(Views.burgerImage(userData));\n    }\n    static updateUserInfoPage(userData) {\n        let userInfo = null;\n        if (config.mainPage !== null) {\n            userInfo = config.mainPage.querySelector('#userInfo');\n            if (!userInfo) {\n                throw new Error('要素が取得できません。');\n            }\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        userInfo.innerHTML = '';\n        userInfo.append(Views.userInfo(userData));\n    }\n}\nclass Controller {\n    static startGame() {\n        Views.startGamePage();\n        if (config.mainPage) {\n            displayNone(config.mainPage);\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        const newButton = document.getElementById('new-button');\n        const loginButton = document.getElementById('login-button');\n        if (newButton) {\n            newButton.addEventListener('click', function () {\n                let userData = Controller.initialUserData();\n                if (userData.name === '') {\n                    alert('Please put your name');\n                }\n                else {\n                    if (config.mainPage && config.initialPage) {\n                        displayBlock(config.mainPage);\n                        displayNone(config.initialPage);\n                        Views.mainPage(userData);\n                        Controller.timeInterval(userData);\n                    }\n                }\n            });\n        }\n        if (loginButton) {\n            loginButton.addEventListener('click', function () {\n                var _a;\n                let userName = null;\n                if (config.initialPage) {\n                    userName = config.initialPage.querySelector('#yourName');\n                    if (!userName) {\n                        throw new Error('要素が取得できません。');\n                    }\n                }\n                else {\n                    throw new Error('要素が取得できません。');\n                }\n                if (localStorage.getItem(userName.toString()) === null) {\n                    alert('No user data');\n                }\n                else {\n                    const userName = (_a = config.initialPage.querySelector('#yourName')) === null || _a === void 0 ? void 0 : _a.value;\n                    if (!userName) {\n                        alert('User name is required.');\n                    }\n                    else {\n                        const userData = localStorage.getItem(userName);\n                        if (userData === null) {\n                            if (userData && config.mainPage) {\n                                const userInfo = JSON.parse(userData);\n                                displayBlock(config.mainPage);\n                                displayNone(config.initialPage);\n                                Views.mainPage(userInfo);\n                                Controller.timeInterval(userInfo);\n                            }\n                        }\n                    }\n                }\n            });\n        }\n    }\n    static initialUserData() {\n        const Items = [\n            new Item('Flip machine', 'click', 500, 15000, './image/flip-machine-img.png', '$25/click', 25, 0, 0),\n            new Item('ETF Stock', 'stock', '∞', 300000, './image/stoks-img.png', '$0.1/sec', 0, 0.1, 0),\n            new Item('ETF Bonds', 'stock', '∞', 300000, './image/stoks-img.png', '$0.7/sec', 0, 0.07, 0),\n            new Item('Lemonade Stand', 'other', 1000, 30000, './image/lemonade-img.png', '$30/sec', 0, 30, 0),\n            new Item('Ice Cream Truck', 'other', 500, 100000, './image/ice-cream-img.png', '$120/sec', 0, 120, 0),\n            new Item('House', 'other', 100, 20000000, './image/house-img.png', '$32000/sec', 0, 32000, 0),\n            new Item('TownHouse', 'other', 100, 40000000, './image/town-house.png', '$64000/sec', 0, 64000, 0),\n            new Item('Mansion', 'other', 20, 250000000, './image/mansion-img.png', '$500000/sec', 0, 500000, 0),\n            new Item('Industrial Space', 'other', 10, 1000000000, './image/industrial-space-img.png', '$2200000/sec', 0, 2200000, 0),\n            new Item('Hotel Skyscraper', 'other', 5, 10000000000, './image/hotel-skyscraper-img.png', '$25000000/sec', 0, 25000000, 0),\n            new Item('Bullet-Speed Sky Railway', 'other', 1, 10000000000000, './image/bullet-speed-sky -railway-img.png', '$30000000000/sec', 0, 30000000000, 0),\n        ];\n        let inputName = null;\n        if (config.initialPage) {\n            inputName = config.initialPage.querySelector('input[name=\"yourName\"]');\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        let userData;\n        if (inputName) {\n            userData = new UserData(inputName.value, 20, 0, 50000, 0, Items);\n        }\n        else {\n            throw new Error('要素が取得できません。');\n        }\n        return userData;\n    }\n    static timeInterval(userData) {\n        Controller.setTimer = window.setInterval(function () {\n            Controller.countDays(userData);\n            if (userData.perSecPrice > 0) {\n                userData.money += userData.perSecPrice;\n            }\n            Controller.rewriteUserData(userData);\n        }, 1000);\n    }\n    static stopTimer() {\n        clearInterval(Controller.setTimer);\n    }\n    static countDays(userData) {\n        userData.days++;\n        if (userData.days % 365 === 0) {\n            userData.age++;\n        }\n    }\n    static rewriteUserData(userData) {\n        if (config.mainPage) {\n            const age = config.mainPage.querySelector('#age');\n            const days = config.mainPage.querySelector('#days');\n            const money = config.mainPage.querySelector('#money');\n            if (age && days && money) {\n                age.innerHTML = `${userData.age} years old`;\n                days.innerHTML = `${userData.days} days`;\n                money.innerHTML = `$${userData.money}`;\n            }\n        }\n    }\n    static CountClickBurger(userData) {\n        userData.burgers++;\n        userData.money += userData.perClickPrice;\n        Views.updateBurgersPage(userData);\n        Views.updateUserInfoPage(userData);\n    }\n    static resetUserData() {\n        window.confirm('Reset All Data?');\n        let newUser = Controller.initialUserData();\n        if (config.mainPage) {\n            config.mainPage.innerHTML = '';\n        }\n        Controller.stopTimer();\n        Views.mainPage(newUser);\n        Controller.timeInterval(newUser);\n    }\n    static purchaseItem(userData, inputNum) {\n        let indexEle = null;\n        let index = null;\n        if (config.mainPage !== null) {\n            indexEle = config.mainPage.querySelector('#box-purchase-info');\n            if (indexEle) {\n                index = indexEle.getAttribute('index');\n            }\n        }\n        let userItem = null;\n        if (index) {\n            userItem = userData.items[+index];\n        }\n        if (userItem !== null) {\n            if (userData.money >= userItem.price * inputNum && inputNum <= +userItem.maxQuantity - userItem.itemPurchaseCount) {\n                if (userItem.type === 'click') {\n                    userItem.itemPurchaseCount += Number(inputNum);\n                    Controller.updateBurgerPrice(userData, Number(index), inputNum);\n                    Views.updateBurgersPage(userData);\n                }\n                else {\n                    userItem.itemPurchaseCount += Number(inputNum);\n                    Controller.updateItemsPrice(userData, Number(index), inputNum);\n                    Views.updateUserInfoPage(userData);\n                }\n            }\n            else if (userData.money >= userItem.price * inputNum && userItem.type === 'stock') {\n                userItem.itemPurchaseCount += Number(inputNum);\n                Controller.updateStocksPrice(userData, Number(index), inputNum);\n                Views.updateUserInfoPage(userData);\n            }\n            else {\n                alert('You can not buy item anymore');\n            }\n        }\n    }\n    static updateBurgerPrice(userData, index, inputNum) {\n        const price = Number(userData.items[index].price) * inputNum;\n        if (userData.money < price) {\n            alert('You have not enough money to buy');\n        }\n        else {\n            userData.money -= price;\n            userData.perClickPrice += userData.items[index].perClick * inputNum;\n            Views.updateUserInfoPage(userData);\n        }\n    }\n    static updateStocksPrice(userData, index, inputNum) {\n        const price = Number(userData.items[index].price) * inputNum;\n        if (userData.money < price) {\n            alert('You have not enough money to buy');\n        }\n        else if (userData.items[index].name === 'ETF Stock') {\n            userData.money -= price;\n            userData.items[index].price += userData.items[index].price * 0.1;\n            userData.perSecPrice += Math.floor(Number(userData.items[index].price) * userData.items[index].perSec * inputNum);\n            Views.updateUserInfoPage(userData);\n        }\n        else if (userData.items[index].name === 'ETF Bonds') {\n            userData.money -= price;\n            userData.perSecPrice += Math.floor(Number(userData.items[index].price) * userData.items[index].perSec * inputNum);\n            Views.updateUserInfoPage(userData);\n        }\n    }\n    static updateItemsPrice(userData, index, inputNum) {\n        const price = Number(userData.items[index].price) * inputNum;\n        if (userData.money < price) {\n            alert('You have not enough money to buy');\n        }\n        else {\n            userData.money -= price;\n            userData.perSecPrice += userData.items[index].perSec * inputNum;\n            Views.updateUserInfoPage(userData);\n        }\n    }\n    static totalItemPrice(userData, index, inputNum) {\n        let totalItemPrice = null;\n        if (config.mainPage !== null) {\n            totalItemPrice = config.mainPage.querySelector('#totalPrice');\n        }\n        if (+inputNum.value > 0 && totalItemPrice) {\n            userData.totalItemPrice = userData.items[index].price * +inputNum.value;\n            totalItemPrice.innerHTML = `total: $${userData.totalItemPrice}`;\n        }\n        else {\n            userData.totalItemPrice = userData.totalItemPrice;\n            if (totalItemPrice) {\n                totalItemPrice.innerHTML = `total: ¥0`;\n            }\n        }\n    }\n}\nController.setTimer = 0;\nController.startGame();\n\n\n//# sourceURL=webpack://ts_base/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;